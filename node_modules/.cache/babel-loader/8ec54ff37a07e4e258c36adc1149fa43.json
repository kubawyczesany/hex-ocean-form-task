{"ast":null,"code":"var usePromise = require('./usePromise');\nfunction UseFetchError(status, statusText, message, fileName, lineNumber) {\n  var instance = new Error(message, fileName, lineNumber);\n  instance.name = 'UseFetchError';\n  instance.status = status;\n  instance.statusText = statusText;\n  Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(instance, UseFetchError);\n  }\n  return instance;\n}\nUseFetchError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nObject.setPrototypeOf(UseFetchError, Error);\nfunction useFetch(path, options, specialOptions) {\n  var blocked = (specialOptions && specialOptions.depends || options && options.depends || []).reduce(function (acc, dep) {\n    return acc || !dep;\n  }, false);\n  return usePromise(!blocked && function (p, o, s) {\n    return fetch(p, o).then(s && s.formatter || o && o.formatter || function (response) {\n      if (!response.ok) {\n        throw new UseFetchError(response.status, response.statusText, 'Fetch error');\n      }\n      return response.json();\n    });\n  }, path, options || {}, specialOptions || {});\n}\nmodule.exports = useFetch;","map":null,"metadata":{},"sourceType":"script"}